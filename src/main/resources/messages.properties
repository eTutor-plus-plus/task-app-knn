correct=Your solution is correct.
incorrect=Your solution is incorrect.
input=Your Input: {0}
criterium.syntax=Syntax
criterium.syntax.valid=Valid Syntax
criterium.value=Value
criterium.point=Point {0}
defaultTaskGroupDescription=Assign the correct label to each point using the k-nearest neighbor algorithm. Each label is a letter (A, B, ...).
defaultTaskDescription=Classify the given points by entering the corresponding labels separated by commas (e.g. A, B, B).
knn.for.point=Classification for Point {0}
knn.point=Point:
knn.classified.as=Classified as:
knn.k.neighbors=k-Nearest Neighbors:
knn.index=Index
knn.class=Class
knn.distance=Distance
knn.votes.per.class=Votes per class:
knn.tie.break.reason=Decision reason:
knn.majority=No tie-break needed – clear majority
knn.sumDistance=Tie resolved by minimal total distance
knn.meanDistance=Tie resolved by minimal mean distance
knn.nearestNeighbor=Tie resolved by nearest neighbor
knn.alphabetical=Tie resolved by alphabetical order

#submission Knn
submission.solution.visualisation=Solution visualisation:
submission.length.mismatch=Input length does not match the expected solution length ({0} expected, {1} provided).
submission.invalid.chars=Your answer contains characters other than letters and commas.
submission.invalid.labels=Unknown label(s): {0}

#Description Knn
task.knn.description=Assign the following {0} test points (green diamonds) to the appropriate class using the KNN classifier (k={1}, distance-metric: {2}).<br>\
The feature domain is:<ul><li>{3} = {4} – {5}</li><li>{6} = {7} – {8}</li></ul>\
If multiple training points have the same distance as the k nearest neighbors, all these points are considered neighbors (so there may be more than k neighbors). <br>
task.knn.metric.formula.manhattan=The Manhattan distance can be calculated as follows: d(x, y) = |x₁ - y₁| + |x₂ - y₂|
task.knn.metric.formula.euclidean=The Euclidean distance can be calculated as follows: d(x, y) = √((x₁ - y₁)² + (x₂ - y₂)²)
task.knn.metric.formula.minkowski=The Minkowski distance with p=3 can be calculated as follows : d(x, y) = (|x₁ - y₁|³ + |x₂ - y₂|³)^(1/3) <br>
task.knn.tiebreaker.sum.description=In case of a tie, the smallest total distance per class decides first, then the alphabetical order of the class name (tie-break method: {0}).
task.knn.tiebreaker.mean.description=In case of a tie, the smallest average distance per class decides first, then the alphabetical order of the class name (tie-break method: {0}).
task.knn.tiebreaker.nearest.description=In case of a tie, the neighbor with the smallest distance decides, then the alphabetical order of the class name (tie-break method: {0}).
task.knn.visualisation=Task visualisation:
task.knn.testpoints.table.title=Points to be classified
task.knn.testpoints.table.points=Point {0}
task.knn.submission.hint=You receive {0} points for each correctly classified point and lose {1} points for each incorrect classification.<br>\
Enter the classes in the same order as the test points (first entry → point 1, second entry → point 2, etc.).<br>\
If you do not want to classify a point, leave the respective field empty as shown in the following example (3 test points, abstention):<br>\
<b>Submission format:</b><br>\
A, B, A <br>\
Example with abstention:<br>\
 , B, A <br>

