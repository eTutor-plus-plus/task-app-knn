correct=Your solution is correct.
incorrect=Your solution is incorrect.
input=Your Input: {0}
criterium.syntax=Syntax
criterium.syntax.valid=Valid Syntax
criterium.value=Value
criterium.point=Point {0}
defaultTaskGroupDescription=Assign the correct label to each point using the k-nearest neighbor algorithm. Each label is a letter (A, B, ...).
defaultTaskDescription=Classify the given points by entering the corresponding labels separated by commas (e.g. A, B, B).
knn.for.point=Classification for Point {0}
knn.point=Point:
knn.classified.as=Classified as:
knn.k.neighbors=k-Nearest Neighbors:
knn.index=Index
knn.class=Class
knn.distance=Distance
knn.votes.per.class=Votes per class:
knn.tie.break.reason=Decision reason:
knn.majority=No tie-break needed – clear majority
knn.sumDistance=Tie resolved by minimal total distance
knn.meanDistance=Tie resolved by minimal mean distance
knn.nearestNeighbor=Tie resolved by nearest neighbor
knn.alphabetical=Tie resolved by alphabetical order

#submission Knn
submission.solution.visualisation=Solution visualisation:
submission.length.mismatch=Input length does not match the expected solution length ({0} expected, {1} provided).
submission.invalid.chars=Your answer contains characters other than letters and commas.
submission.invalid.labels=Unknown label(s): {0}

#Description Knn
task.knn.description=Assign the following {0} test points (green) to the correct class using the KNN classifier (k={1}, distance: {2}). \
The feature range is x={3}..{4}, y={5}..{6}. \
Note: If multiple training points have the same distance as the k-th nearest neighbor, all of them are considered neighbors (so there may be more than k neighbors).
task.knn.tiebreaker.sum.description=In case of a tie, the class with the smallest total distance is chosen; if still tied, alphabetical order is used (tie-breaker: {0}).
task.knn.tiebreaker.mean.description=In case of a tie, the class with the smallest mean distance is chosen; if still tied, alphabetical order is used (tie-breaker: {0}).
task.knn.tiebreaker.nearest.description=In case of a tie, the class with the closest single neighbor is chosen; if still tied, alphabetical order is used (tie-breaker: {0}).
task.knn.visualisation=Exercise visualisation:
task.knn.testpoints.table.title=Points to classify
task.knn.testpoints.table.points=Point {0}
task.knn.submission.hint=Each correctly classified point awards {0} points, each misclassified point deducts {1} points.<br>\
Answers must be given in the same order as the test points (first entry → point 1, second entry → point 2, ...).<br>\
If you want to abstain from classifying a Points, just leave the corresponding position empty as shown in the example with abstention below.<br>\
<b>Submission format:</b><br>\
A, B, A <br>\
Example with abstention:<br>\
 , B, A <br>

